<?phpif ( ! function_exists( 'get_event_listings' ) ) :/** * Queries event listings with certain criteria and returns them * * @access public * @return void */function get_event_listings( $args = array() ) {	global $wpdb, $event_manager_keyword;	$args = wp_parse_args( $args, array(		'search_location'   => '',		'search_keywords'   => '',		'search_datetimes' => array(),		'search_categories' => array(),		'search_event_types' => array(),		'search_ticket_prices' => array(),		'offset'            => 0,		'posts_per_page'    => 15,		'orderby'           => 'date',		'order'             => 'DESC',		'featured'          => null,		'cancelled'            => null,		'fields'            => 'all'	) );	$query_args = array(		'post_type'              => 'event_listing',		'post_status'            => 'publish',		'ignore_sticky_posts'    => 1,		'offset'                 => absint( $args['offset'] ),		'posts_per_page'         => intval( $args['posts_per_page'] ),		'orderby'                => $args['orderby'],		'order'                  => $args['order'],		'tax_query'              => array(),		'meta_query'             => array(),		'update_post_term_cache' => false,		'update_post_meta_cache' => false,		'cache_results'          => false,		'fields'                 => $args['fields']	);	if ( $args['posts_per_page'] < 0 ) {		$query_args['no_found_rows'] = true;	}	if ( ! empty( $args['search_location'] ) ) {		$location_meta_keys = array( 'geolocation_formatted_address', '_event_location', 'geolocation_state_long' );		$location_search    = array( 'relation' => 'OR' );		foreach ( $location_meta_keys as $meta_key ) {			$location_search[] = array(				'key'     => $meta_key,				'value'   => $args['search_location'],				'compare' => 'like'			);		}		$query_args['meta_query'][] = $location_search;	}	if ( ! is_null( $args['featured'] ) ) {		$query_args['meta_query'][] = array(			'key'     => '_featured',			'value'   => '1',			'compare' => $args['featured'] ? '=' : '!='		);	}	if ( ! is_null( $args['cancelled'] ) || 1 === absint( get_option( 'event_manager_hide_cancelled_events' ) ) ) {		$query_args['meta_query'][] = array(			'key'     => '_cancelled',			'value'   => '1',			'compare' => $args['cancelled'] ? '=' : '!='		);	}	if ( ! empty( $args['search_datetimes'] ) ) 	{					if($args['search_datetimes'][0]=='datetime_today')			{					$datetime=date('Y-m-d');								$date_search[] = array(						'key'     => '_event_start_date',						'value'   => $datetime,						'compare' => 'LIKE',					);			}			elseif($args['search_datetimes'][0]=='datetime_tomorrow')			{ 				$datetime=date('Y-m-d',strtotime("+1 day")); 								$date_search[] = array(						'key'     => '_event_start_date',						'value'   => $datetime,						'compare' => 'LIKE',					);			}			elseif($args['search_datetimes'][0]=='datetime_thisweek')			{									$year=date('Y');				$weekNumber=date('W');                                 $dates[0]= date('Y-m-d', strtotime($year.'W'.str_pad($weekNumber, 2, 0, STR_PAD_LEFT)));                $dates[1] = date('Y-m-d', strtotime($year.'W'.str_pad($weekNumber, 2, 0, STR_PAD_LEFT).' +6 days'));								$date_search[] = array(					'key'     => '_event_start_date',					'value'   => $dates,					'compare' => 'BETWEEN',					'type'    => 'date'				);			} 			elseif($args['search_datetimes'][0]=='datetime_thisweekend')			{				$saturday_date=date('Y-m-d', strtotime('this Saturday', time()));				$sunday_date=date('Y-m-d', strtotime('this Saturday +1 day', time()));                $dates[0]= $saturday_date;                $dates[1]= $sunday_date;                			    $date_search[] = array(						'key'     => '_event_start_date',						'value'   => $dates,					    'compare' => 'BETWEEN',					    'type'    => 'date'					);			} 			elseif($args['search_datetimes'][0]=='datetime_thismonth')			{	                $dates[0]= date('Y-m-d', strtotime('first day of this month', time()));                $dates[1] = date('Y-m-d', strtotime('last day of this month', time()));								$date_search[] = array(						'key'     => '_event_start_date',						'value'   => $dates,					    'compare' => 'BETWEEN',					    'type'    => 'date'					);			}			elseif($args['search_datetimes'][0]=='datetime_thisyear')			{				$dates[0]= date('Y-m-d', strtotime('first day of january', time()));                $dates[1] = date('Y-m-d', strtotime('last day of december', time()));					$date_search[] = array(						'key'     => '_event_start_date',						'value'   => $dates,					    'compare' => 'BETWEEN',					    'type'    => 'date'					);			}			elseif($args['search_datetimes'][0]=='datetime_nextweek')			{			    $year=date('Y');				$weekNumber=date('W')+1;                                 $dates[0]= date('Y-m-d', strtotime($year.'W'.str_pad($weekNumber, 2, 0, STR_PAD_LEFT)));                $dates[1] = date('Y-m-d', strtotime($year.'W'.str_pad($weekNumber, 2, 0, STR_PAD_LEFT).' +6 days'));	               				$date_search[] = array(					'key'     => '_event_start_date',					'value'   => $dates,					'compare' => 'BETWEEN',					'type'    => 'date'				);		    						}			elseif($args['search_datetimes'][0]=='datetime_nextweekend')			{				$next_saturday_date=date('Y-m-d', strtotime('next Saturday', time()));				$next_sunday_date=date('Y-m-d', strtotime('next Saturday +1 day', time()));                $dates[0]= $next_saturday_date;                $dates[1]= $next_sunday_date;                               			    $date_search[] = array(						'key'     => '_event_start_date',						'value'   => $dates,					    'compare' => 'BETWEEN',					    'type'    => 'date'					);			} 			elseif($args['search_datetimes'][0]=='datetime_nextmonth')			{				$dates[0]= date('Y-m-d', strtotime('first day of next month', time()));                $dates[1] = date('Y-m-d', strtotime('last day of next month', time()));	                				$date_search[] = array(						'key'     => '_event_start_date',						'value'   => $dates,					    'compare' => 'BETWEEN',					    'type'    => 'date'					);			}			elseif($args['search_datetimes'][0]=='datetime_nextyear')			{			    $year=date('Y')+1;			    $dates[0]= date('Y-m-d', strtotime('first day of January ' . $year, time()));                $dates[1] = date('Y-m-d', strtotime('last day of december '. $year, time()));              				$date_search[] = array(						'key'     => '_event_start_date',						'value'   => $dates,					    'compare' => 'BETWEEN',					    'type'    => 'date'					);			}			$query_args['meta_query'][] = $date_search;	}	if ( ! empty( $args['search_categories'] ) ) 	{		$field    = is_numeric( $args['search_categories'][0] ) ? 'term_id' : 'slug';		$operator = 'all' === get_option( 'event_manager_category_filter_type', 'all' ) && sizeof( $args['search_categories'] ) > 1 ? 'AND' : 'IN';		$query_args['tax_query'][] = array(								'taxonomy'         => 'event_listing_category',								'field'            => $field,								'terms'            => array_values( $args['search_categories'] ),								'include_children' => $operator !== 'AND' ,								'operator'         => $operator							);	}		if ( ! empty( $args['search_event_types'] ) ) 	{		$field    = is_numeric( $args['search_event_types'][0] ) ? 'term_id' : 'slug';			$operator = 'all' === get_option( 'event_manager_event_type_filter_type', 'all' ) && sizeof( $args['search_event_types'] ) > 1 ? 'AND' : 'IN';			$query_args['tax_query'][] = array(								'taxonomy'         => 'event_listing_type',								'field'            => $field,								'terms'            => array_values( $args['search_event_types'] ),								'include_children' => $operator !== 'AND' ,								'operator'         => $operator							);		}	//must match with event_ticket_options options value at gam-event-manager-form-submit-event.php	if ( ! empty( $args['search_ticket_prices'] ) ) 	{			if($args['search_ticket_prices'][0]=='ticket_price_paid')		{  		  $ticket_price_value='paid';     		}		else if ($args['search_ticket_prices'][0]=='ticket_price_free')		{		  $ticket_price_value='free';		}				$ticket_search[] = array(						'key'     => '_event_ticket_options',						'value'   => $ticket_price_value,						'compare' => '=',					);		$query_args['meta_query'][] = $ticket_search;	}	if ( 'featured' === $args['orderby'] ) {		$query_args['orderby'] = array(			'menu_order' => 'ASC',			'date'       => 'DESC'		);	}	if ( $event_manager_keyword = sanitize_text_field( $args['search_keywords'] ) ) {		$query_args['_keyword'] = $event_manager_keyword; // Does nothing but needed for unique hash		add_filter( 'posts_clauses', 'get_event_listings_keyword_search' );	}		$query_args = apply_filters( 'event_manager_get_listings', $query_args, $args );	if ( empty( $query_args['meta_query'] ) ) {		unset( $query_args['meta_query'] );	}	if ( empty( $query_args['tax_query'] ) ) {		unset( $query_args['tax_query'] );	}	// Filter args	$query_args = apply_filters( 'get_event_listings_query_args', $query_args, $args );	// Generate hash	$to_hash  = json_encode( $query_args ) . apply_filters( 'wpml_current_language', '' );	$query_args_hash = 'em_' . md5( $to_hash ) . GAM_Event_Manager_Cache_Helper::get_transient_version( 'get_event_listings' );	do_action( 'before_get_event_listings', $query_args, $args );	if ( false === ( $result = get_transient( $query_args_hash ) ) ) {		$result = new WP_Query( $query_args );		set_transient( $query_args_hash, $result, DAY_IN_SECONDS * 30 );	}	do_action( 'after_get_event_listings', $query_args, $args );	remove_filter( 'posts_clauses', 'get_event_listings_keyword_search' );	return $result;}endif;if ( ! function_exists( 'get_event_listings_keyword_search' ) ) :	/**	 * Join and where query for keywords	 *	 * @param array $args	 * @return array	 */	function get_event_listings_keyword_search( $args ) {		global $wpdb, $event_manager_keyword;		// Query matching ids to avoid more joins		$post_ids   = $wpdb->get_col( "SELECT post_id FROM {$wpdb->postmeta} WHERE meta_value LIKE '%" .esc_sql( $event_manager_keyword ) . "%'" );		$conditions = array();				$conditions[] = "{$wpdb->posts}.post_title LIKE '%" . esc_sql( $event_manager_keyword ) . "%'";       if ( ctype_alnum( $event_manager_keyword ) ) {			$conditions[] = "{$wpdb->posts}.post_content RLIKE '[[:<:]]" . esc_sql( $event_manager_keyword ) . "[[:>:]]'";		} else {			$conditions[] = "{$wpdb->posts}.post_content LIKE '%" . esc_sql( $event_manager_keyword ) . "%'";		}		if ( $post_ids ) {			$conditions[] = "{$wpdb->posts}.ID IN (" . esc_sql( implode( ',', $post_ids ) ) . ")";		}		$args['where'] .= " AND ( " . implode( ' OR ', $conditions ) . " ) ";				return $args;	}endif;if ( ! function_exists( 'order_featured_event_listing' ) ) :	/**	 * Was used for sorting.	 *	 * @deprecated 1.0.0	 * @param array $args	 * @return array	 */	function order_featured_event_listing( $args ) {		global $wpdb;		$args['orderby'] = "$wpdb->posts.menu_order ASC, $wpdb->posts.post_date DESC";		return $args;	}endif;if ( ! function_exists( 'get_event_listing_post_statuses' ) ) :/** * Get post statuses used for events * * @access public * @return array */function get_event_listing_post_statuses() {	return apply_filters( 'event_listing_post_statuses', array(		'draft'           => _x( 'Draft', 'post status', 'gam-event-manager' ),		'expired'         => _x( 'Expired', 'post status', 'gam-event-manager' ),		'preview'         => _x( 'Preview', 'post status', 'gam-event-manager' ),		'pending'         => _x( 'Pending approval', 'post status', 'gam-event-manager' ),		'pending_payment' => _x( 'Pending payment', 'post status', 'gam-event-manager' ),		'publish'         => _x( 'Active', 'post status', 'gam-event-manager' ),	) );}endif;if ( ! function_exists( 'get_featured_event_ids' ) ) :/** * Gets the ids of featured events. * * @access public * @return array */function get_featured_event_ids() {	return get_posts( array(		'posts_per_page' => -1,		'post_type'      => 'event_listing',		'post_status'    => 'publish',		'meta_key'       => '_featured',		'meta_value'     => '1',		'fields'         => 'ids'	) );}endif;if ( ! function_exists( 'get_event_listing_types' ) ) :/** * Get event listing types * * @access public * @return array */function get_event_listing_types() {	 if ( ! get_option( 'event_manager_enable_event_types' ) ) {	     		return array();	}	return get_terms( "event_listing_type", array(		'orderby'    => 'name',		'order'      => 'ASC',		'hide_empty' => false,	) );}endif;if ( ! function_exists( 'get_event_listing_categories' ) ) :/** * Get event categories * * @access public * @return array */function get_event_listing_categories() {	if ( ! get_option( 'event_manager_enable_categories' ) ) {				return array();	}		return get_terms( "event_listing_category", array(		'orderby'       => 'name',	    'order'         => 'ASC',	    'hide_empty'    => false,	) );}endif;if ( ! function_exists( 'event_manager_get_filtered_links' ) ) :/** * Shows links after filtering events */function event_manager_get_filtered_links( $args = array() ) {    $search_datetimes= array();	$search_categories = array();	$search_event_types= array();	$search_ticket_prices= array();		// Convert to slugs	if ( $args['search_categories'] ) {		foreach ( $args['search_categories'] as $category ) {			if ( is_numeric( $category ) ) {				$category_object = get_term_by( 'id', $category, 'event_listing_category' );				if ( ! is_wp_error( $category_object ) ) {					$search_categories [] = $category_object->slug;				}							} else {				$search_categories [] = $category;			}		}	}		// Convert to slugs	if ( $args['search_event_types'] ) {		foreach ( $args['search_event_types'] as $type) {			if ( is_numeric( $type) ) {				$type_object = get_term_by( 'id', $type, 'event_listing_type' );				if ( ! is_wp_error( $type_object ) ) {					$search_event_types[] = $type_object->slug;				}			} else {				$search_event_types[] = $type;			}		}	}		//datetimes	//add just key like datetime_any, datetime_today..	if ( $args['search_datetimes']) 	{			foreach ( $args['search_datetimes'] as $datetime) 		{ 				$search_datetimes[]=$datetime;		}	}	//ticket price	//add just key like ticket_price_any, ticket_price_paid..		if ( $args['search_ticket_prices']) 	{			foreach ( $args['search_ticket_prices'] as $ticket_price) 		{ 				$search_ticket_prices[]=$ticket_price;		}	}	$links = apply_filters( 'event_manager_event_filters_showing_events_links', array(		'reset' => array(			'name' => __( 'Reset', 'gam-event-manager' ),			'url'  => '#'		),		'rss_link' => array(			'name' => __( 'RSS', 'gam-event-manager' ),			'url'  => get_event_listing_rss_link( apply_filters( 'event_manager_get_listings_custom_filter_rss_args', array(				'search_keywords' => $args['search_keywords'],				'search_location' => $args['search_location'],					'search_datetimes'  => implode( ',', $search_datetimes),				'search_categories'  => implode( ',', $search_categories ),				'search_event_types'  => implode( ',', $search_event_types),				'search_ticket_prices'  => implode( ',', $search_ticket_prices)			) ) )		)	), $args );	if ( ! $args['search_keywords'] && ! $args['search_location'] && ! $args['search_datetimes'] && ! $args['search_categories'] && ! $args['search_event_types'] && ! $args['search_ticket_prices'] && ! apply_filters( 'event_manager_get_listings_custom_filter', false ) ) {		unset( $links['reset'] );	}	$return = '';		foreach ( $links as $key => $link ) {		$return .= '<a href="' . esc_url( $link['url'] ) . '" class="' . esc_attr( $key ) . '">' . $link['name'] . '</a>';	}		return $return;}endif;if ( ! function_exists( 'get_event_listing_rss_link' ) ) :/** * Get the Event Listing RSS link * * @return string */function get_event_listing_rss_link( $args = array() ) {	$rss_link = add_query_arg( urlencode_deep( array_merge( array( 'feed' => 'event_feed' ), $args ) ), home_url() );	return $rss_link;}endif;if ( ! function_exists( 'event_manager_create_account' ) ) :/** * Handle account creation. * * @param  array $args containing username, email, role * @param  string $deprecated role string * @return WP_error | bool was an account created? */function gam_event_manager_create_account( $args, $deprecated = '' ) {	global $current_user;	global $wp_version;	// Soft Deprecated in 1.0.0	if ( ! is_array( $args ) ) {		$username = '';		$password = wp_generate_password();		$email    = $args;		$role     = $deprecated;	} else {		$defaults = array(			'username' => '',			'email'    => '',			'password' => wp_generate_password(),			'role'     => get_option( 'default_role' )		);				$args = wp_parse_args( $args, $defaults );		extract( $args );	}	$username = sanitize_user( $username );	$email    = apply_filters( 'user_registration_email', sanitize_email( $email ) );	if ( empty( $email ) ) {		return new WP_Error( 'validation-error', __( 'Invalid email address.', 'gam-event-manager' ) );	}		if ( empty( $username ) ) {		$username = sanitize_user( current( explode( '@', $email ) ) );	}	if ( ! is_email( $email ) ) {		return new WP_Error( 'validation-error', __( 'Your email address isn&#8217;t correct.', 'gam-event-manager' ) );	}	if ( email_exists( $email ) ) {		return new WP_Error( 'validation-error', __( 'This email is already registered, please choose another one.', 'gam-event-manager' ) );	}	// Ensure username is unique	$append     = 1;	$o_username = $username;	while ( username_exists( $username ) ) {		$username = $o_username . $append;		$append ++;	}	// Final error checking	$reg_errors = new WP_Error();	$reg_errors = apply_filters( 'event_manager_registration_errors', $reg_errors, $username, $email );	do_action( 'event_manager_register_post', $username, $email, $reg_errors );	if ( $reg_errors->get_error_code() ) {		return $reg_errors;	}	// Create account	$new_user = array(		'user_login' => $username,		'user_pass'  => $password,		'user_email' => $email,		'role'       => $role    );    $user_id = wp_insert_user( apply_filters( 'event_manager_create_account_data', $new_user ) );    if ( is_wp_error( $user_id ) ) {    	return $user_id;    }         // Notify    if ( version_compare( $wp_version, '4.3.1', '<' ) ) {    	wp_new_user_notification( $user_id, $password );    } else {    	wp_new_user_notification( $user_id, null, 'both' );    }	// Login    wp_set_auth_cookie( $user_id, true, is_ssl() );    $current_user = get_user_by( 'id', $user_id );        return true;}endif;/** * True if an the user can post a event. If accounts are required, and reg is enabled, users can post (they signup at the same time). * * @return bool */function event_manager_user_can_post_event() {	$can_post = true;	if ( ! is_user_logged_in() ) {		if ( event_manager_user_requires_account() && ! event_manager_enable_registration() ) {			$can_post = false;		}	}	return apply_filters( 'event_manager_user_can_post_event', $can_post );}/** * True if an the user can edit a event. * * @return bool */function event_manager_user_can_edit_event( $event_id ) {	$can_edit = true;		if ( ! is_user_logged_in() || ! $event_id ) {		$can_edit = false;	} else {		$event      = get_post( $event_id );		if ( ! $event || ( absint( $event->post_author ) !== get_current_user_id() && ! current_user_can( 'edit_post', $event_id ) ) ) {			$can_edit = false;		}	}		return apply_filters( 'event_manager_user_can_edit_event', $can_edit, $event_id );}/** * True if registration is enabled. * * @return bool */function event_manager_enable_registration() {	return apply_filters( 'event_manager_enable_registration', get_option( 'event_manager_enable_registration' ) == 1 ? true : false );}/** * True if usernames are generated from email addresses. * * @return bool */function event_manager_generate_username_from_email() {	return apply_filters( 'event_manager_generate_username_from_email', get_option( 'event_manager_generate_username_from_email' ) == 1 ? true : false );}/** * True if an account is required to post a event. * * @return bool */function event_manager_user_requires_account() {	return apply_filters( 'event_manager_user_requires_account', get_option( 'event_manager_user_requires_account' ) == 1 ? true : false );}/** * True if users are allowed to edit submissions that are pending approval. * * @return bool */function event_manager_user_can_edit_pending_submissions() {	return apply_filters( 'event_manager_user_can_edit_pending_submissions', get_option( 'event_manager_user_can_edit_pending_submissions' ) == 1 ? true : false );}/** * Based on wp_dropdown_categories, with the exception of supporting multiple selected categories, event types. * @see  wp_dropdown_categories */function event_manager_dropdown_selection( $args = '' ) {	$defaults = array(		'orderby'         => 'id',		'order'           => 'ASC',		'show_count'      => 0,		'hide_empty'      => 1,		'child_of'        => 0,		'exclude'         => '',		'echo'            => 1,		'selected'        => 0,		'hierarchical'    => 0,		'name'            => 'cat',		'id'              => '',		'class'           => 'event-manager-category-dropdown ' . ( is_rtl() ? 'chosen-rtl' : '' ),		'depth'           => 0,		'taxonomy'        => 'event_listing_category',		'value'           => 'id',		'multiple'        => true,		'show_option_all' => false,		'placeholder'     => __( 'Choose a category&hellip;', 'gam-event-manager' ),		'no_results_text' => __( 'No results match', 'gam-event-manager' ),		'multiple_text'   => __( 'Select Some Options', 'gam-event-manager' )	);	$r = wp_parse_args( $args, $defaults );	if ( ! isset( $r['pad_counts'] ) && $r['show_count'] && $r['hierarchical'] ) {		$r['pad_counts'] = true;	}	extract( $r );	// Store in a transient to help sites with many cats	$categories_hash = 'em_cats_' . md5( json_encode( $r ) . GAM_Event_Manager_Cache_Helper::get_transient_version( 'em_get_' . $r['taxonomy'] ) );	$categories      = get_transient( $categories_hash );	if ( empty( $categories ) ) {		$categories = get_terms( $taxonomy, array(			'orderby'         => $r['orderby'],			'order'           => $r['order'],			'hide_empty'      => $r['hide_empty'],			'child_of'        => $r['child_of'],			'exclude'         => $r['exclude'],			'hierarchical'    => $r['hierarchical']		) );		set_transient( $categories_hash, $categories, DAY_IN_SECONDS * 30 );	}	$name       = esc_attr( $name );	$class      = esc_attr( $class );	$id         = $id ? esc_attr( $id ) : $name;	if($taxonomy=='event_listing_type'):		$placeholder=__( 'Choose a event type&hellip;', 'gam-event-manager' );	endif;	$output = "<select name='" . esc_attr( $name ) . "[]' id='" . esc_attr( $id ) . "' class='" . esc_attr( $class ) . "' " . ( $multiple ? "multiple='multiple'" : '' ) . " data-placeholder='" . esc_attr( $placeholder ) . "' data-no_results_text='" . esc_attr( $no_results_text ) . "' data-multiple_text='" . esc_attr( $multiple_text ) . "'>\n";	if ( $show_option_all ) {		$output .= '<option value="">' . esc_html( $show_option_all ) . '</option>';	}	if ( ! empty( $categories ) ) {		include_once( EVENT_MANAGER_PLUGIN_DIR . '/core/gam-event-manager-category-walker.php' );		$walker = new GAM_Event_Manager_Category_Walker;		if ( $hierarchical ) {			$depth = $r['depth'];  // Walk the full depth.		} else {			$depth = -1; // Flat.		}		$output .= $walker->walk( $categories, $depth, $r );	}	$output .= "</select>\n";	if ( $echo ) {		echo $output;	}	return $output;}/** * Get the permalink of a page if set * @param  string $page e.g. event_dashboard, submit_event_form, events * @return string|bool */function event_manager_get_permalink( $page ) {	$page_id = get_option( 'event_manager_' . $page . '_page_id', false );	if ( $page_id ) {		return get_permalink( $page_id );			} else {		return false;	}}/** * Filters the upload dir when $event_manager_upload is true * @param  array $pathdata * @return array */function event_manager_upload_dir( $pathdata ) {	global $event_manager_upload, $event_manager_uploading_file;	if ( ! empty( $event_manager_upload ) ) {		$dir = apply_filters( 'event_manager_upload_dir', 'event-manager-uploads/' . sanitize_key( $event_manager_uploading_file ), sanitize_key( $event_manager_uploading_file ) );		if ( empty( $pathdata['subdir'] ) ) {			$pathdata['path']   = $pathdata['path'] . '/' . $dir;			$pathdata['url']    = $pathdata['url'] . '/' . $dir;			$pathdata['subdir'] = '/' . $dir;		} else {			$new_subdir         = '/' . $dir . $pathdata['subdir'];			$pathdata['path']   = str_replace( $pathdata['subdir'], $new_subdir, $pathdata['path'] );			$pathdata['url']    = str_replace( $pathdata['subdir'], $new_subdir, $pathdata['url'] );			$pathdata['subdir'] = str_replace( $pathdata['subdir'], $new_subdir, $pathdata['subdir'] );		}	}	return $pathdata;}add_filter( 'upload_dir', 'event_manager_upload_dir' );/** * Prepare files for upload by standardizing them into an array. This adds support for multiple file upload fields. * @param  array $file_data * @return array */function event_manager_prepare_uploaded_files( $file_data ) {	$files_to_upload = array();		if ( is_array( $file_data['name'] ) ) {		foreach( $file_data['name'] as $file_data_key => $file_data_value ) {			if ( $file_data['name'][ $file_data_key ] ) {				$type              = wp_check_filetype( $file_data['name'][ $file_data_key ] ); // Map mime types to those that WordPress knows.				$files_to_upload[] = array(					'name'     => $file_data['name'][ $file_data_key ],					'type'     => $type['type'],					'tmp_name' => $file_data['tmp_name'][ $file_data_key ],					'error'    => $file_data['error'][ $file_data_key ],					'size'     => $file_data['size'][ $file_data_key ]				);			}		}	} else {		$type              = wp_check_filetype( $file_data['name'] ); // Map mime types to those that WordPress knows.		$file_data['type'] = $type['type'];		$files_to_upload[] = $file_data;	}	return $files_to_upload;}/** * Upload a file using WordPress file API. * @param  array $file_data Array of $_FILE data to upload. * @param  array $args Optional arguments * @return array|WP_Error Array of objects containing either file information or an error */function event_manager_upload_file( $file, $args = array() ) {	global $event_manager_upload, $event_manager_uploading_file;	include_once( ABSPATH . 'wp-admin/includes/file.php' );	include_once( ABSPATH . 'wp-admin/includes/media.php' );	$args = wp_parse_args( $args, array(		'file_key'           => '',		'file_label'         => '',		'allowed_mime_types' => get_allowed_mime_types()	) );	$event_manager_upload         = true;	$event_manager_uploading_file = $args['file_key'];	$uploaded_file              = new stdClass();	if ( ! in_array( $file['type'], $args['allowed_mime_types'] ) ) {		if ( $args['file_label'] ) {			return new WP_Error( 'upload', sprintf( __( '"%s" (filetype %s) needs to be one of the following file types: %s', 'gam-event-manager' ), $args['file_label'], $file['type'], implode( ', ', array_keys( $args['allowed_mime_types'] ) ) ) );		} else {			return new WP_Error( 'upload', sprintf( __( 'Uploaded files need to be one of the following file types: %s', 'gam-event-manager' ), implode( ', ', array_keys( $args['allowed_mime_types'] ) ) ) );		}	} else {		$upload = wp_handle_upload( $file, apply_filters( 'submit_event_wp_handle_upload_overrides', array( 'test_form' => false ) ) );		if ( ! empty( $upload['error'] ) ) {			return new WP_Error( 'upload', $upload['error'] );		} else {			$uploaded_file->url       = $upload['url'];			$uploaded_file->file      = $upload['file'];			$uploaded_file->name      = basename( $upload['file'] );			$uploaded_file->type      = $upload['type'];			$uploaded_file->size      = $file['size'];			$uploaded_file->extension = substr( strrchr( $uploaded_file->name, '.' ), 1 );		}	}	$event_manager_upload         = false;	$event_manager_uploading_file = '';	return $uploaded_file;}/** * Calculate and return the event expiry date * @param  int $event_id * @return string */function get_event_expiry_date( $event_id ) {	//get set listing expiry time duration	$option=get_option( 'event_manager_submission_expire_options' );	if($option=='event_end_date')	{	   $event_end_date = get_post_meta( $event_id, '_event_end_date', true );	   if($event_end_date)	   {	        return date( 'Y-m-d', strtotime( $event_end_date ) );	    	//return date_i18n( __( 'M j, Y', 'gam-event-manager' ), strtotime(  $event_end_date ) );	   }	}	else	{		// Get duration from the admin settings if set.		$duration = get_post_meta( $event_id, '_event_duration', true );				if ( ! $duration ) {		   			$duration = absint( get_option( 'event_manager_submission_duration' ) );		}				if ( $duration ) {			//return date( 'Y-m-d', strtotime( "+{$duration} days", current_time( 'timestamp' ) ) );						return date( 'Y-m-d', strtotime( "+{$duration} days", strtotime(get_the_date('',$event_id) ) ) );		}	}	return '';}/** * Set the current language of the ajax request * @param  string $lang * @return string */function event_manager_set_ajax_language( $lang ) {    if ( ( strstr( $_SERVER['REQUEST_URI'], '/em-ajax/' ) || ! empty( $_GET['em-ajax'] ) ) && isset( $_POST['lang'] ) ) {        		$lang = sanitize_text_field( $_POST['lang'] );	}    return $lang;}add_filter( 'icl_current_language', 'event_manager_set_ajax_language' );